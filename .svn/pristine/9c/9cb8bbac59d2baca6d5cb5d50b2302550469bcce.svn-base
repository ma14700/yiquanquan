<template>
  <div class="shopcart">
    <loading v-if="isLoading"></loading>
    <div v-if="!isLoading">
      <div class="cart-blank" v-if="this.cartList.length == 0">
        购物车为空
      </div>
      <!--提示信息  -->
      <div class="msg " v-if="this.cartList.length != 0">
        <p>
          <i class="iconfont icon-ionfontxiangqingye-"></i>库存紧张，尽快购买哦！</p>
      </div>
      <!--提示信息  end-->
      <!--商品  -->
      <div class="goods ">
        <span class="edit" @click="changeStatus" v-if="this.cartList.length != 0">{{this.edit}}</span>
        <!-- <span class="edit">完成</span> -->
        <ul>
          <li v-for="(good, index) in cartList" class="good-wraper" :key="index">
            <a class="check" href="javascript:void 0">
              <i class="iconfont " :class="[good.isChecked?'icon-duihao':'icon-quan']" @click="selectGood(good,index)"></i>
            </a>
            <div>
              <div class="imgbox" @click="goShopDetail(good.cartGoodId)">
                <img v-lazy="good.goodFirstPicUrl" alt="">
              </div>
              <!-- 默认样式 -->
              <div class="des-text " :class="[delShow?'delete-hide':'delete-show']">
                <p class="title">{{good.goodName}}</p>
                <p class="size">{{proData(good.skuPropName)}}</p>
                <p class="price">￥{{good.skuPrice | two}}
                  <del>￥{{good.skuPrice |two}}</del>
                  <span class="num">×{{good.cartNum}}</span>
                </p>
              </div>
              <!--编辑样式  -->
              <div class="shopedit" :class="[delShow?'delete-show':'delete-hide']">
                <div class="count">
                  <button class="minus" @click.stop="reduceQuentity(good,-1,index)">-</button>
                  <input type="text" :value="good.cartNum" v-model="good.cartNum" readonly unselectable="on">
                  <button class="plus" @click.stop="addQuentity(good,1)">+</button>
                </div>

                <p class="size">{{proData(good.skuPropName)}}</p>
                <div class="delete" @click.stop="delGood(good,index)">
                  删除
                </div>
              </div>
            </div>

          </li>
        </ul>

      </div>

      <!--商品  end-->
      <!--底部购买  -->

      <div class="buy" v-if="this.cartList.length != 0">
        <div class="all-choose blank-leaving">

          <a href="javascript:void 0" @click="selectAll" v-show="quanxuan">

            <i class="iconfont " :class="[isSelectAll?'icon-duihao':'icon-quan']"></i>全选

          </a>
          <a href="javascript:void 0" @click="unSelectAll" v-show="!quanxuan">

            <i class="iconfont " :class="[isSelectAll?'icon-duihao':'icon-quan']"></i>全选

          </a>
          <span class="total">总计:
            <i class="total-pay">￥</i>
            <i class="total-pay" v-text="totalPrice"></i>
          </span>
        </div>
        <div class="pay" @click="payMoney">
          结算
          <span class="pay-num">({{totalNum}})</span>
        </div>
      </div>
      <!--底部购买 end  -->
      <div class="alert-msg" v-if="showAlert">{{alertMsg}}</div>
      <!--底部  -->
      <footer class="footer"></footer>
      <footer class="footer"></footer>
      <foot-guide></foot-guide>

      <!--底部 end  -->
    </div>
  </div>
</template>

<script>
import { mapState, mapMutations } from 'vuex'
import loading from '../../components/loading/loading';
import footGuide from '../../components/footer/footGuide'
import { MessageBox } from 'mint-ui';
export default {
  data() {

    return {
      quanxuan: true,
      isSelectAll: false,
      readyToDelIndex: -1,
      delShow: false,
      edit: '编辑',
      value: 1,
      cartList: [],
      cartNum: '',
      alertMsg: '',
      showAlert: false,
      numArr: [],
      isLoading: true,
    }
  },
  computed: {
    ...mapState([
      'addMoreGood', 'goodOrderAddMore','settleAccounts'
    ]),

    // 总数
    totalNum: function() {
      let totalnum = 0;
      this.cartList.forEach(function(good) {
        if (good.isChecked) {
          totalnum += parseInt(good.cartNum);
        }
      })

      return totalnum;
    },
    // 总价
    totalPrice: function() {
      let totalprice = 0;
      this.cartList.forEach(function(good) {
        if (good.isChecked) {
          totalprice += good.cartNum * good.skuPrice;

        }
      });
      return totalprice.toFixed(2);
    },
  },
  components: {
    loading,
    footGuide,
  },
  created() {
    let _this=this
    this.$http.get('/api/shopCart/shopcartlist?pageIndx=1&pageSize=30').then(res => {
      this.cartList = res.data;
      if (res.data) {
        this.isLoading = false;
      }
    })
    this.GIT_PACKAGE_ADD_MORE();
    this.GIT_GOOD_ADD_MORE();
    

  },
  mounted() {

  },
  // 检测那个路由过来
  beforeRouteEnter(to, from, next) {

    next(vm => {
      vm.url = from.path;
      if (vm.url == '/cartgoodorder') {

        vm.CLEAR_ALL_SETTLE();
      }
    })
  },
  methods: {
    ...mapMutations([
      'SETTLE_ACCOUNTS', 'CLEAR_SETTLE_ACCOUNTS', 'CLEAR_ALL_SETTLE', 'GIT_PACKAGE_ADD_MORE', 'GIT_GOOD_ADD_MORE','GIT_SETTLE_ACCOUNTS'
    ]),
    //
    proData(pro) {
        pro = pro.split(";");
        let data = [];
        for (let i = 0; i < pro.length; i++) {
          data.push(pro[i].split(":")[1]);
        }
        return data.join(";");
    },
    //
    goShopDetail(id) {
      this.$router.push({ path: '/shopDetail', query: { id } });
    },
    //结算
    payMoney: function() {
      console.info(this.cartList);
      var _this = this;
      this.cartList.map(function(goodObj){
        if(!!goodObj.isChecked){
          _this.SETTLE_ACCOUNTS({
            SkuInfoId: goodObj.skuInfoId,
            CartNum: goodObj.cartNum,
            CartGoodId: goodObj.cartGoodId,
            goodName: goodObj.goodName,
            goodTotalPrice: goodObj.skuPrice * goodObj.cartNum,
            goodPrice: goodObj.skuPrice,
            goodImgUrl: goodObj.goodFirstPicUrl,
            skuPropName: goodObj.skuPropName
          })
        }
      });
      this.GIT_SETTLE_ACCOUNTS();
      console.info(this.settleAccounts);
      if (this.totalNum != 0) {
        if (this.addMoreGood.length != 0 && this.addMoreGood[this.addMoreGood.length - 1].moreGood) {
          this.$router.push({ path: '/cartpackage?id=' + this.addMoreGood[this.addMoreGood.length - 1].packageOrderId });
        } else {
          this.$router.push({ path: '/cartgoodorder' });
        }
      } else {
        this.alertMsg = "您还没有选择商品哦";
        this.showAlert = true;
        var self = this;
        setTimeout(function() {
          self.showAlert = false
        }, 1000);
      }
    },
    // 选择商品
    selectGood: function(goodObj, index) {
      // console.info(!!goodObj.isChecked)
      this.$set(goodObj, "isChecked", !!!goodObj.isChecked);
      this.isCheckAll();
    },

    // 全选
    selectAll: function() {
      this.isSelectAll = true;
      this.quanxuan = false;
      this.cartList.forEach((good) => {
        //good.isChecked = true;
        this.$set(good, "isChecked", true);
      });


    },
    unSelectAll: function() {
      this.quanxuan = true;
      this.isSelectAll = false;
      this.cartList.forEach((good) => {
        this.$set(good, "isChecked", false);

      });
    },
    //是否选中全部
    isCheckAll: function() {
      let flag = true;
      this.cartList.forEach(function(good) {
        if (!good.isChecked) {
          flag = false;
        }
      });
      if (!flag) {
        this.isSelectAll = false;
        this.quanxuan = true;
      } else {
        this.isSelectAll = true;
        this.quanxuan = false;
      }
    },
    //删除商品
    delGood: function(good, _index) {
      MessageBox.confirm('确认要删除该商品么?', '确认删除').then(action => {
        this.readyToDelIndex = _index;
        this.cartList.splice(this.readyToDelIndex, 1);
        this.$http.post('api/shopcart/shopcartdel?cartIds=' + good.id).then(res => { })
      });
    },
    //改变数量
    reduceQuentity: function(good, val, _index) {
      if (good.cartNum == 1 && val == -1) {
        this.readyToDelIndex = _index;
      } else {
        good.cartNum--;
        this.$http.post('/api/shopCart/shopcart/', {
          "SkuInfoId": good.skuInfoId,
          "CartNum": good.cartNum,
          "CartGoodId": good.cartGoodId,
          "OperaType": 2,
          "CreateType": 0

        }).then(res => {

        })
      }
    },
    addQuentity: function(good, _index) {

      good.cartNum++;
      //数量改变时发送请求
      this.$http.post('/api/shopCart/shopcart/', {
        "SkuInfoId": good.skuInfoId,
        "CartNum": good.cartNum,
        "CartGoodId": good.cartGoodId,
        "OperaType": 1,
        "CreateType": 0
      }).then(res => {
        if (!res.data.success) {
          this.reduceQuentity(good, -1, _index);
        }
      })

    },
    freeChangeQuentity(good) {
      this.$http.post('/api/shopCart/shopcart/', {
        "SkuInfoId": good.skuInfoId,
        "CartNum": good.cartNum,
        "CartGoodId": good.cartGoodId,
        "OperaType": 1,
        "CreateType": 1
      }).then(res => {
        if (!res.data.success) {
          alert("库存不足");
        }
      })
    },

    // 编辑状态
    changeStatus() {

      this.delShow = !this.delShow;
      let a = "编辑";
      let b = "完成";
      if (this.edit == a) {
        this.edit = b
      } else {
        this.edit = a;
      }

    },


  },
  watch: {

  },
  filters: {
    //保留两位小数点
    two: function(value) {

      if (!value) { return '' };
      return value.toFixed(2);
    }

  }
}
</script>

<style>
.shopcart .cart-blank {
  position: fixed;
  height: 1rem;
  width: 6rem;

  color: #b0a4bc;
  font-size: .48rem;
  text-align: center;
  line-height: 1rem;
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
}

.shopcart .msg {
  line-height: 1.333333rem;
  color: #b0a4bc;
  font-size: .4rem;
  padding: 0 .4rem;
}

.shopcart .msg .icon-ionfontxiangqingye- {
  margin-right: .2rem;
  font-size: .4rem
}

.shopcart .goods {

  position: relative;
}

.shopcart .edit {
  position: absolute;
  right: .4rem;
  top: -.9rem;
  font-size: .4rem;
  color: #b0a4bc
}

.shopcart .good-wraper {
  padding: .3725rem 0;
  overflow: hidden;
  border-top: 1px solid #eeecf1;
}


.shopcart .check i {
  line-height: 2rem;
  display: block;
  float: left;
  font-size: .56rem;
  color: #b0a4bc;
  margin-left: .4rem;
}

.shopcart .imgbox {
  border: 1px solid #ece5f4;
  border-radius: .133333rem;
  width: 2rem;
  float: left;
  margin: 0 .4rem;
  height: 2rem;
  overflow: hidden;
}

.shopcart .imgbox img {
  width: 100%;
  height: 100%;
}















/*  */

.shopcart .des-text {
  float: right;
  width: 6.1rem;
  box-sizing: border-box;
  padding-right: .4rem;
}

.shopcart .des-text .title {
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: .4rem;
  color: #492b67;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  white-space: normal!important;
  line-height: .5rem;
  height: 1rem;
}

.shopcart .delete-show {
  display: block;
}

.shopcart .delete-hide {
  display: none;
}

.shopcart .des-text .size {
  color: #b0a4bc;
  font-size: .325rem;
  line-height: .35rem;
  margin-top: 0.05rem;
}

.shopcart .des-text .price {
  line-height: .4rem;
  margin-top: 0.2rem;
  color: #de3163;
  font-size: .4rem;
}

.shopcart .des-text .price del {
  color: #b0a4bc;
  font-size: .32rem;
  margin-left: .4rem;
  text-decoration: line-through;
}

.shopcart .des-text .price .num {
  float: right;
  color: #b0a4bc;
}













/*  */

.shopcart .shopedit {
  float: right;
  width: 6.15rem;
  height: 2rem;
  position: relative;
  box-sizing: border-box;
}

.shopcart .shopedit .size {
  color: #b0a4bc;
  font-size: .36rem;
  line-height: .6rem;
  width: 4rem;
  position: absolute;
  bottom: 0px;
  left: 0px;
}

.shopcart .shopedit .count {
  width: 3.5rem;
  height: .733333rem;
  line-height: .733333rem;
  border-radius: .133333rem;
  border: 1px solid #aea2ba;
  color: #492b67;
  overflow: hidden;

  position: absolute;
  top: 0px;
  left: 0px;
}

.shopcart .shopedit .count input,
.shopcart .shopedit .count button {
  height: 100%;
  width: 1rem;
  border: 0;
  background: #fff;
  color: #aea2ba;
  font-size: .52rem;
}

.shopcart .shopedit .count button.plus {
  float: right;
  border-left: 1px solid #aea2ba;
}

.shopcart .shopedit .count button.minus {
  border-right: 1px solid #aea2ba;
  float: left;
}

.shopcart .shopedit .count input {
  box-sizing: border-box;
  text-align: center;
  font-size: .4rem;
  color: #492b67;
  width: 1.5rem;
  float: left;
}

.shopcart .shopedit .delete {
  position: absolute;
  right: 0;
  top: 0;
  width: 1.733333rem;
  height: 100%;
  color: #fff;
  line-height: 2.133333rem;
  font-size: .466667rem;
  text-align: center;
  background: #b0a4bc;
}















/*底部  */

.shopcart .fot {
  height: 1.306667rem;
  width: 100%;
}

.shopcart .buy {
  height: 1.306667rem;
  width: 100%;
  position: fixed;
  background: #fff;
  bottom: 1.466667rem;
  line-height: 1.306667rem;
  box-shadow: 0 0 1px #aaa;
}

.shopcart .all-choose {
  display: block;
  float: left;
  font-size: .4rem;
  color: #b0a4bc;

  width: 7.2rem;
  box-sizing: border-box;
}

.shopcart .all-choose a {
  color: #b0a4bc;
}

.shopcart .all-choose .iconfont {
  margin-right: .4rem;
  font-size: .56rem;
}

.shopcart .all-choose .total {
  float: right;
  font-size: .45rem;
}

.shopcart .all-choose .total .total-pay {
  color: #de3163;
  font-size: .45rem;
  font-weight: 700;
}

.shopcart .pay {
  width: 2.8rem;
  background: linear-gradient(to right, #946cb6, #da3494);
  float: left;
  text-align: center;
  font-size: .45rem;
  color: #fff;
}

.alert-msg {
  position: fixed;
  height: 1rem;
  width: 6rem;
  background: rgba(0, 0, 0, 0.7);
  color: #fff;
  font-size: .4rem;
  text-align: center;
  line-height: 1rem;
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
  border-radius: 0.2rem;
  transition: .2s;
}







/* messagebox */

.mint-msgbox-title {
  color: #b0a4bc;
  font-size: .533333rem;
  font-weight: normal;
}

.mint-msgbox-message {
  color: #b0a4bc;
}

.mint-msgbox-btn.mint-msgbox-confirm {
  color: #492b67;
  font-size: .48rem;
}

.mint-msgbox-btn.mint-msgbox-cancel {
  color: #b0a4bc;
  font-size: .48rem;
}
</style>
